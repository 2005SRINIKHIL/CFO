import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Download, FileText, Mail, Share, Calendar } from 'lucide-react';
import jsPDF from 'jspdf';
import { useFinancial } from '../contexts/FinancialContext';

const ReportGenerator: React.FC = () => {
  const { financialData, scenarioResults, getExpenseBreakdown, getRunwayMonths, trackUsage } = useFinancial();
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = async () => {
    setIsGenerating(true);
    trackUsage('reportsGenerated');

    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Title
      pdf.setFontSize(24);
      pdf.setFont('helvetica', 'bold');
      pdf.text('CFO Helper - Financial Report', 20, 30);
      
      // Date
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);
      
      // Executive Summary
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Executive Summary', 20, 65);
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      const runwayMonths = getRunwayMonths();
      const totalExpenses = financialData.monthlyExpenses + 
        (financialData.teamSize * financialData.averageSalary) +
        financialData.marketingBudget + 
        financialData.operationalExpenses;
      
      const netCashFlow = financialData.monthlyRevenue - totalExpenses;
      
      const summaryText = [
        `Current Cash Position: $${(financialData.currentCash / 1000).toFixed(0)}K`,
        `Monthly Revenue: $${(financialData.monthlyRevenue / 1000).toFixed(0)}K`,
        `Monthly Burn Rate: $${(totalExpenses / 1000).toFixed(0)}K`,
        `Net Cash Flow: ${netCashFlow >= 0 ? '+' : ''}$${(netCashFlow / 1000).toFixed(0)}K`,
        `Financial Runway: ${isFinite(runwayMonths) ? `${runwayMonths.toFixed(1)} months` : 'Infinite'}`,
        `Team Size: ${financialData.teamSize} employees`,
        `Revenue Growth Rate: ${financialData.growthRate}% annually`
      ];
      
      let yPos = 75;
      summaryText.forEach(line => {
        pdf.text(line, 25, yPos);
        yPos += 8;
      });

      // Financial Metrics
      yPos += 10;
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Key Financial Metrics', 20, yPos);
      
      yPos += 15;
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      // Expense Breakdown
      const expenseBreakdown = getExpenseBreakdown();
      pdf.text('Monthly Expense Breakdown:', 25, yPos);
      yPos += 8;
      
      expenseBreakdown.forEach(expense => {
        pdf.text(`• ${expense.category}: $${(expense.amount / 1000).toFixed(0)}K`, 30, yPos);
        yPos += 6;
      });

      // Recommendations
      yPos += 15;
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Strategic Recommendations', 20, yPos);
      
      yPos += 15;
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      const recommendations = [];
      
      if (runwayMonths < 12 && isFinite(runwayMonths)) {
        recommendations.push('• URGENT: Runway is critical. Consider reducing expenses or increasing revenue immediately.');
      } else if (runwayMonths < 18 && isFinite(runwayMonths)) {
        recommendations.push('• WARNING: Runway is below 18 months. Plan fundraising or cost optimization.');
      }
      
      if (netCashFlow < 0) {
        recommendations.push('• Focus on achieving positive cash flow through revenue growth or expense reduction.');
      }
      
      if (financialData.growthRate < 10) {
        recommendations.push('• Consider strategies to accelerate revenue growth rate above 10% annually.');
      }
      
      if (expenseBreakdown.find(e => e.category === 'Salaries')?.amount! > totalExpenses * 0.6) {
        recommendations.push('• Salary costs exceed 60% of expenses. Review hiring plan and compensation structure.');
      }
      
      if (recommendations.length === 0) {
        recommendations.push('• Financial health appears strong. Continue monitoring key metrics.');
        recommendations.push('• Consider strategic investments in growth opportunities.');
      }
      
      recommendations.forEach(rec => {
        if (yPos > pageHeight - 30) {
          pdf.addPage();
          yPos = 20;
        }
        
        const lines = pdf.splitTextToSize(rec, pageWidth - 50);
        lines.forEach((line: string) => {
          pdf.text(line, 25, yPos);
          yPos += 6;
        });
        yPos += 3;
      });

      // Footer
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'italic');
      pdf.text('Generated by CFO Helper - Financial Intelligence Platform', 20, pageHeight - 15);
      
      // Save the PDF
      pdf.save('cfo-helper-financial-report.pdf');
      
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const reportTypes = [
    {
      title: 'Executive Summary',
      description: 'High-level overview of financial health and key metrics',
      icon: FileText,
      color: 'blue'
    },
    {
      title: 'Detailed Analysis',
      description: 'Comprehensive breakdown with charts and projections',
      icon: Calendar,
      color: 'green'
    },
    {
      title: 'Investor Report',
      description: 'Professional report formatted for investor meetings',
      icon: Share,
      color: 'purple'
    }
  ];

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="p-6 space-y-6"
    >
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Report Generator</h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">
          Generate professional financial reports with your current scenario data
        </p>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800">
          <div className="text-blue-600 dark:text-blue-400 text-sm font-medium">Current Cash</div>
          <div className="text-2xl font-bold text-blue-900 dark:text-blue-100">
            ${(financialData.currentCash / 1000).toFixed(0)}K
          </div>
        </div>
        <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg border border-green-200 dark:border-green-800">
          <div className="text-green-600 dark:text-green-400 text-sm font-medium">Monthly Revenue</div>
          <div className="text-2xl font-bold text-green-900 dark:text-green-100">
            ${(financialData.monthlyRevenue / 1000).toFixed(0)}K
          </div>
        </div>
        <div className="bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg border border-orange-200 dark:border-orange-800">
          <div className="text-orange-600 dark:text-orange-400 text-sm font-medium">Runway</div>
          <div className="text-2xl font-bold text-orange-900 dark:text-orange-100">
            {isFinite(getRunwayMonths()) ? `${getRunwayMonths().toFixed(1)}M` : '∞'}
          </div>
        </div>
        <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg border border-purple-200 dark:border-purple-800">
          <div className="text-purple-600 dark:text-purple-400 text-sm font-medium">Team Size</div>
          <div className="text-2xl font-bold text-purple-900 dark:text-purple-100">
            {financialData.teamSize}
          </div>
        </div>
      </div>

      {/* Report Types */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {reportTypes.map((report, index) => {
          const IconComponent = report.icon;
          return (
            <motion.div
              key={report.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700"
            >
              <div className={`w-12 h-12 bg-${report.color}-100 dark:bg-${report.color}-900/20 rounded-lg flex items-center justify-center mb-4`}>
                <IconComponent className={`w-6 h-6 text-${report.color}-600 dark:text-${report.color}-400`} />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                {report.title}
              </h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm mb-4">
                {report.description}
              </p>
              <motion.button
                onClick={generatePDF}
                disabled={isGenerating}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className={`w-full flex items-center justify-center space-x-2 py-2 px-4 bg-${report.color}-500 hover:bg-${report.color}-600 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-lg transition-colors`}
              >
                {isGenerating ? (
                  <>
                    <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full"></div>
                    <span>Generating...</span>
                  </>
                ) : (
                  <>
                    <Download className="w-4 h-4" />
                    <span>Generate PDF</span>
                  </>
                )}
              </motion.button>
            </motion.div>
          );
        })}
      </div>

      {/* Additional Actions */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          Additional Actions
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className="flex items-center space-x-3 p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
          >
            <Mail className="w-5 h-5 text-gray-600 dark:text-gray-400" />
            <div className="text-left">
              <div className="font-medium text-gray-900 dark:text-white">Email Report</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">Send to stakeholders</div>
            </div>
          </motion.button>
          
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className="flex items-center space-x-3 p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
          >
            <Calendar className="w-5 h-5 text-gray-600 dark:text-gray-400" />
            <div className="text-left">
              <div className="font-medium text-gray-900 dark:text-white">Schedule Reports</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">Automated delivery</div>
            </div>
          </motion.button>
        </div>
      </div>
    </motion.div>
  );
};

export default ReportGenerator;